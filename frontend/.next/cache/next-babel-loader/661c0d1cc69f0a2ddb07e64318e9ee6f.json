{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport swr from \"swr\";\nimport fetch from \"isomorphic-unfetch\";\nimport useSWR from \"swr\";\n\nvar Redirect = function Redirect(props) {\n  console.log(data);\n  return null;\n};\n\nRedirect.getInitialProps = function _callee(_ref) {\n  var url, apiLink, initialData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = _ref.url;\n          apiLink = \"http://localhost:3000/redirect/:\".concat(url);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetcher(url));\n\n        case 4:\n          initialData = _context.sent;\n          return _context.abrupt(\"return\", {\n            initialData: initialData,\n            apiLink: apiLink\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Redirect;","map":{"version":3,"sources":["/home/simon/Desktop/Projects/dink-url-shortner/frontend/pages/[url].js"],"names":["swr","fetch","useSWR","Redirect","props","console","log","data","getInitialProps","url","apiLink","fetcher","initialData"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,KAAnB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACA,SAAO,IAAP;AACD,CAHD;;AAKAJ,QAAQ,CAACK,eAAT,GAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,GAAT,QAASA,GAAT;AACnBC,UAAAA,OADmB,6CAC0BD,GAD1B;AAAA;AAAA,2CAECE,OAAO,CAACF,GAAD,CAFR;;AAAA;AAEnBG,UAAAA,WAFmB;AAAA,2CAGlB;AAAEA,YAAAA,WAAW,EAAXA,WAAF;AAAeF,YAAAA,OAAO,EAAPA;AAAf,WAHkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAMA,eAAeP,QAAf","sourcesContent":["import swr from \"swr\";\nimport fetch from \"isomorphic-unfetch\";\nimport useSWR from \"swr\";\n\nconst Redirect = props => {\n  console.log(data);\n  return null;\n};\n\nRedirect.getInitialProps = async ({ url }) => {\n  const apiLink = `http://localhost:3000/redirect/:${url}`;\n  const initialData = await fetcher(url);\n  return { initialData, apiLink };\n};\n\nexport default Redirect;\n"]},"metadata":{},"sourceType":"module"}