{"ast":null,"code":"import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport withApollo from \"next-with-apollo\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\"; // Update the GraphQL endpoint to any instance of GraphQL that you like\n\nconst GRAPHQL_URL = \"http://localhost:4000/graphql\";\nconst link = createHttpLink({\n  fetch,\n  // Switches between unfetch & node-fetch for client & server.\n  uri: GRAPHQL_URL\n});\nexport default withApollo(({\n  initialState\n}) => new ApolloClient({\n  link: link,\n  cache: new InMemoryCache().restore(initialState || {})\n}));","map":{"version":3,"sources":["/home/simon/Desktop/Projects/dink-url-shortner/frontend/apolloConfig.js"],"names":["ApolloClient","InMemoryCache","withApollo","createHttpLink","fetch","GRAPHQL_URL","link","uri","initialState","cache","restore"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,+BAApB;AAEA,MAAMC,IAAI,GAAGH,cAAc,CAAC;AAC1BC,EAAAA,KAD0B;AACnB;AACPG,EAAAA,GAAG,EAAEF;AAFqB,CAAD,CAA3B;AAKA,eAAeH,UAAU,CACvB,CAAC;AAAEM,EAAAA;AAAF,CAAD,KACE,IAAIR,YAAJ,CAAiB;AACfM,EAAAA,IAAI,EAAEA,IADS;AAEfG,EAAAA,KAAK,EAAE,IAAIR,aAAJ,GAAoBS,OAApB,CAA4BF,YAAY,IAAI,EAA5C;AAFQ,CAAjB,CAFqB,CAAzB","sourcesContent":["import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport withApollo from \"next-with-apollo\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\";\n\n// Update the GraphQL endpoint to any instance of GraphQL that you like\nconst GRAPHQL_URL = \"http://localhost:4000/graphql\";\n\nconst link = createHttpLink({\n  fetch, // Switches between unfetch & node-fetch for client & server.\n  uri: GRAPHQL_URL\n});\n\nexport default withApollo(\n  ({ initialState }) =>\n    new ApolloClient({\n      link: link,\n      cache: new InMemoryCache().restore(initialState || {})\n    })\n);\n"]},"metadata":{},"sourceType":"module"}