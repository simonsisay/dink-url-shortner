{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/simon/Desktop/Projects/dink-url-shortner/frontend/context/Theme.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nexport var ThemeContext = React.createContext(\"light\");\n\nvar AppTheme = function AppTheme(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(\"light\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentTheme = _useState2[0],\n      setCurrentTheme = _useState2[1];\n\n  var switchTheme = function switchTheme() {\n    var nextTheme = currentTheme === \"light\" ? \"dark\" : \"light\";\n    setCurrentTheme(nextTheme);\n  };\n\n  return __jsx(ThemeContext.Provider, {\n    value: {\n      currentTheme: currentTheme,\n      switchTheme: switchTheme\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, children);\n};\n\nexport default AppTheme;","map":{"version":3,"sources":["/home/simon/Desktop/Projects/dink-url-shortner/frontend/context/Theme.js"],"names":["ThemeContext","React","createContext","AppTheme","children","useState","currentTheme","setCurrentTheme","switchTheme","nextTheme"],"mappings":";;;;AAAA,OAAO,IAAMA,YAAY,GAAGC,KAAK,CAACC,aAAN,CAAoB,OAApB,CAArB;;AAEP,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACOC,QAAQ,CAAC,OAAD,CADf;AAAA;AAAA,MAC1BC,YAD0B;AAAA,MACZC,eADY;;AAGjC,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAMC,SAAS,GAAGH,YAAY,KAAK,OAAjB,GAA2B,MAA3B,GAAoC,OAAtD;AACAC,IAAAA,eAAe,CAACE,SAAD,CAAf;AACD,GAHD;;AAKA,SACE,MAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEH,MAAAA,YAAY,EAAZA,YAAF;AAAgBE,MAAAA,WAAW,EAAXA;AAAhB,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,QADH,CADF;AAKD,CAbD;;AAeA,eAAeD,QAAf","sourcesContent":["export const ThemeContext = React.createContext(\"light\");\n\nconst AppTheme = ({ children }) => {\n  const [currentTheme, setCurrentTheme] = useState(\"light\");\n\n  const switchTheme = () => {\n    const nextTheme = currentTheme === \"light\" ? \"dark\" : \"light\";\n    setCurrentTheme(nextTheme);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ currentTheme, switchTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default AppTheme;\n"]},"metadata":{},"sourceType":"module"}